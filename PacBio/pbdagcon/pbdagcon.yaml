build:
  actions:
  - mkdir: $INSTALL_DIR/lib/python
  - shell_command: 'export PYTHONPATH=$PYTHONPATH:$INSTALL_DIR/lib/python

      python setup.py install --install-lib $INSTALL_DIR/lib/python --install-scripts $INSTALL_DIR/bin'
#depends:
#- build_req: 'True'
  #name: example
  #repo_name: package_example_1_0
  #repo_owner: iuc
  #repo_rev: 0f9f634dec8a
  #vers: '1.0'
meta:
  name: pbdagcon
  readme: "What is pbdagcon?\n=================\n\npbdagcon is a tool that implements DAGCon (Directed Acyclic Graph\nConsensus) which is a sequence consensus algorithm based on using\ndirected acyclic graphs to encode multiple sequence alignment.\n\nIt uses the alignment information from blasr to align sequence reads to\na \"backbone\" sequence. Based on the underlying alignment directed\nacyclic graph (DAG), it will be able to use the new information from the\nreads to find the discrepancies between the reads and the \"backbone\"\nsequences. A dynamic programming process is then applied to the DAG to\nfind the optimum sequence of bases as the consensus. The new consensus\ncan be used as a new backbone sequence to iteratively improve the\nconsensus quality.\n\nWhile the code is developed for processing PacBio(TM) raw sequence data,\nthe algorithm can be used for general consensus purpose. Currently, it\nonly takes FASTA input. For shorter read sequences, one might need to\nadjust the blasr alignment parameters to get the alignment string\nproperly.\n\nThe code and the underlying graphical data structure have been used for\nsome algorithm development prototyping including phasing reads,\npre-assembly and a work around to generate consensus from intermediate\nCelera Assembler outputs.\n\nThe initial graphical algorithm was a pure python implementation. Cython\nwas then use to speed it up.\n\nCheck out the example/ directory to see how to use it.\n\nThis code is released under the assumption it will help the community to\nadopt the PacBio data and make interesting science project possible and\nmore feasible. It is not an official software release from the\nPacBio(TM) software developing organization.\n\nCode Organization\n=================\n\n| Currently a WIP, the code is transitioning from python to C++ so\nthings will\n| move around a bit. The new C++ code has been placed in *cpp/*\nsubdirectories.\n\nBuilding\n========\n\nThe following are instructions on how to build the C++ pbdagcon\nexecutable.\n\nPre-requisites\n~~~~~~~~~~~~~~\n\n-  `pblibblasr <https://github.com/PacificBiosciences/pblibblasr>`__\n   BLASR library\n-  `boost <http://www.boost.org/>`__ Popular C++ utility library (1.46\n   or 1.47)\n-  `log4cpp <http://log4cpp.sourceforge.net/>`__ Logging library (1.0 or\n   1.1)\n-  `gtest <http://code.google.com/p/googletest/>`__ Google's C++ unit\n   test Library (to build tests, at least 1.3.0)\n\nCompile/Check\n~~~~~~~~~~~~~\n\n::\n\n    > export BLASR=<path to pblibblasr>\n    > export GTEST=<path to gtest>\n\n    # build pbdagcon executable\n    > make cpp \n    > cd src/cpp\n\n    # build and run unit tests\n    > make cpp-check\n\n    # usage \n    > ./pbdagcon --help\n\nRunning\n=======\n\nUse Case: Generating consensus from BLASR alignments\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe most basic use case where one can generate a consensus from a set of\nalignments using the pbdagcon executable directly.\n\nAt the most basic level, pbdagcon takes information from BLASR\nalignments sorted by target and generates fasta-formatted corrected\ntarget sequences. The alignments from BLASR can be formatted with either\n*-m 4* or *-m 5*. For *-m 4* format, the alignments must be run through\na format adapter, *src/m4topre.py*, in order to generate suitable input\nto *pbdagcon*.\n\nThe following example shows the simplest way to generate a consensus for\none target using BLASR *-m 5* alignments as input.\n\n::\n\n    > blasr queries.fasta target.fasta -bestn 1 -m 5 -out mapped.m5\n    > pbdagcon mapped.m5 > consensus.fasta\n\nUse Case: HGAP correction of PacBio reads\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n| Walks through how one could use pbdagcon to correct PacBio reads. This\nexample demonstrates how correction is performed in PacBio's\n\"Hierarchichal\n| Genome Assembly Process\" (HGAP) workflow. HGAP uses BLASR *-m 4*\noutput.\n\nThis example makes use of the *src/filterm4.py* and *src/m4topre.py*\nscripts.\n\n::\n\n    # First filter the m4 file to help remove chimeras\n    > filterm4.py mapped.m4 > mapped.m4.filt\n\n    # Next run the m4 adapter script, generating 'pre-alignments'\n    > m4topre.py mapped.m4.filt mapped.m4.filt reads.fasta 24 > mapped.pre\n\n    # Finally, correct using pbdagcon, typically using multiple consensus  \n    # threads.\n    > pbdagcon -j 4 -a mapped.pre > corrected.fasta\n\nThe *src/cpp/pbdagcon\\_wf.sh* script automates this workflow.\n\n--------------\n\n"
  vers: 2014.02.06
source:
  git_repo:
    rev: 70485268ede24c9035de4a03e78c1f6f8d3ee76b
    url: https://github.com/PacificBiosciences/pbdagcon

