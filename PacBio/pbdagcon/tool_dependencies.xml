<?xml version="1.0"?>
<tool_dependency>
  <package name="pbdagcon" version="2014.02.06">
    <install version="1.0">
      <actions>
        <action type="shell_command">git clone https://github.com/PacificBiosciences/pbdagcon pbdagcon</action>
        <action type="shell_command">git reset --hard 70485268ede24c9035de4a03e78c1f6f8d3ee76b</action>
        <action type="make_directory">$INSTALL_DIR/lib/python</action>
        <action type="shell_command">export PYTHONPATH=$PYTHONPATH:$INSTALL_DIR/lib/python &amp;&amp; python setup.py install --install-lib $INSTALL_DIR/lib/python --install-scripts $INSTALL_DIR/bin</action>
      </actions>
    </install>
    <readme>What is pbdagcon?
=================

pbdagcon is a tool that implements DAGCon (Directed Acyclic Graph
Consensus) which is a sequence consensus algorithm based on using
directed acyclic graphs to encode multiple sequence alignment.

It uses the alignment information from blasr to align sequence reads to
a "backbone" sequence. Based on the underlying alignment directed
acyclic graph (DAG), it will be able to use the new information from the
reads to find the discrepancies between the reads and the "backbone"
sequences. A dynamic programming process is then applied to the DAG to
find the optimum sequence of bases as the consensus. The new consensus
can be used as a new backbone sequence to iteratively improve the
consensus quality.

While the code is developed for processing PacBio(TM) raw sequence data,
the algorithm can be used for general consensus purpose. Currently, it
only takes FASTA input. For shorter read sequences, one might need to
adjust the blasr alignment parameters to get the alignment string
properly.

The code and the underlying graphical data structure have been used for
some algorithm development prototyping including phasing reads,
pre-assembly and a work around to generate consensus from intermediate
Celera Assembler outputs.

The initial graphical algorithm was a pure python implementation. Cython
was then use to speed it up.

Check out the example/ directory to see how to use it.

This code is released under the assumption it will help the community to
adopt the PacBio data and make interesting science project possible and
more feasible. It is not an official software release from the
PacBio(TM) software developing organization.

Code Organization
=================

| Currently a WIP, the code is transitioning from python to C++ so
things will
| move around a bit. The new C++ code has been placed in *cpp/*
subdirectories.

Building
========

The following are instructions on how to build the C++ pbdagcon
executable.

Pre-requisites
~~~~~~~~~~~~~~

-  `pblibblasr &lt;https://github.com/PacificBiosciences/pblibblasr&gt;`__
   BLASR library
-  `boost &lt;http://www.boost.org/&gt;`__ Popular C++ utility library (1.46
   or 1.47)
-  `log4cpp &lt;http://log4cpp.sourceforge.net/&gt;`__ Logging library (1.0 or
   1.1)
-  `gtest &lt;http://code.google.com/p/googletest/&gt;`__ Google's C++ unit
   test Library (to build tests, at least 1.3.0)

Compile/Check
~~~~~~~~~~~~~

::

    &gt; export BLASR=&lt;path to pblibblasr&gt;
    &gt; export GTEST=&lt;path to gtest&gt;

    # build pbdagcon executable
    &gt; make cpp 
    &gt; cd src/cpp

    # build and run unit tests
    &gt; make cpp-check

    # usage 
    &gt; ./pbdagcon --help

Running
=======

Use Case: Generating consensus from BLASR alignments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The most basic use case where one can generate a consensus from a set of
alignments using the pbdagcon executable directly.

At the most basic level, pbdagcon takes information from BLASR
alignments sorted by target and generates fasta-formatted corrected
target sequences. The alignments from BLASR can be formatted with either
*-m 4* or *-m 5*. For *-m 4* format, the alignments must be run through
a format adapter, *src/m4topre.py*, in order to generate suitable input
to *pbdagcon*.

The following example shows the simplest way to generate a consensus for
one target using BLASR *-m 5* alignments as input.

::

    &gt; blasr queries.fasta target.fasta -bestn 1 -m 5 -out mapped.m5
    &gt; pbdagcon mapped.m5 &gt; consensus.fasta

Use Case: HGAP correction of PacBio reads
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| Walks through how one could use pbdagcon to correct PacBio reads. This
example demonstrates how correction is performed in PacBio's
"Hierarchichal
| Genome Assembly Process" (HGAP) workflow. HGAP uses BLASR *-m 4*
output.

This example makes use of the *src/filterm4.py* and *src/m4topre.py*
scripts.

::

    # First filter the m4 file to help remove chimeras
    &gt; filterm4.py mapped.m4 &gt; mapped.m4.filt

    # Next run the m4 adapter script, generating 'pre-alignments'
    &gt; m4topre.py mapped.m4.filt mapped.m4.filt reads.fasta 24 &gt; mapped.pre

    # Finally, correct using pbdagcon, typically using multiple consensus  
    # threads.
    &gt; pbdagcon -j 4 -a mapped.pre &gt; corrected.fasta

The *src/cpp/pbdagcon\_wf.sh* script automates this workflow.

--------------

</readme>
  </package>
</tool_dependency>
